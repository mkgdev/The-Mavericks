<% include ./partials/header.ejs %>
<div class="container">
 <h3 style="color:white">IOTLET App</h3>
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>


</div>
<script>

 function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: -33.8688, lng: 151.2195},
          zoom:200,
          mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();
          

          if (places.length == 0) {
            return;
          }
          
          
          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));
              
              getGeometryAll();
              
              passMarkers();

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } 
              else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
    var markerCircles = [];
    function getGeometryAll()
     {
         markers.forEach(function(marker)
         {
              var geometry = {};
                         
              geometry.lat = parseFloat(parseFloat(marker.getPosition().lat()).toFixed(4));
        
           geometry.lng =  parseFloat(parseFloat(marker.getPosition().lng()).toFixed(4));
         markerCircles.push(geometry);
                         
               
         }
         
    ); 
     }
     
     function passMarkers()
     {
         
      markers.forEach(function(marker){
      
         
            var geo = {};
            geo.lat = marker.getPosition().lat();
            geo.lng = marker.getPosition().lng();
           var cityCircle = new google.maps.Circle({
            strokeColor: '#87BCFF',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#E2FFFE',
            fillOpacity: 0.2,
            map: map,
            center: geo,
            radius: 1000,
          });
          
        
          var bounds = {
          
           Top : parseFloat(parseFloat(cityCircle.getBounds().getNorthEast().lat()).toFixed(4)),
           Right : parseFloat(parseFloat(cityCircle.getBounds().getNorthEast().lng()).toFixed(4)),            
              Bottom : parseFloat(parseFloat(cityCircle.getBounds().getSouthWest().lat()).toFixed(4)),
           Left   :parseFloat(parseFloat(cityCircle.getBounds().getSouthWest().lng()).toFixed(4))
          
          }
          
          
          
          var flag = 1;
          
          markerCircles.forEach(function(geometry)
          {               
             
            
              if((geometry.lng <=bounds.Top) && (geometry.l>=bounds.Bottom )&& (geometry.lat<=bounds.Right)&&(geometry.lat>=bounds.Left))
                  {
                      if(parseFloat(parseFloat(geo.lat).toFixed(4))!=geometry.lat && parseFloat(parseFloat(geo.lng).toFixed(4))!=geometry.lng){
                      
                        console.log('not required');
                        
                        flag= 0;
                     
                  }
                  }

              else{
//                  console.log('required');
        
      
          }  
          }
                                
          );
          
          if(flag == 0){
              cityCircle.fillColor = 'transparent';
                        cityCircle.strokeColor = 'transparent';
          }
          
          
    
                      });  }}
                      
                      
    
 
    
    //==========================================
//    function findNearestMarker(geometry) {
//      Number.prototype.toRad = function() {
//         return this * Math.PI / 180;
//      }
//
//      Number.prototype.toDeg = function() {
//         return this * 180 / Math.PI;
//      }
//
//      google.maps.LatLng.prototype.destinationPoint = function(brng, dist) {
//         dist = dist / 6371;  
//         brng = brng.toRad();  
//
//         var lat1 = this.lat().toRad(), lon1 = this.lng().toRad();
//
//         var lat2 = Math.asin(Math.sin(lat1) * Math.cos(dist) + 
//                              Math.cos(lat1) * Math.sin(dist) * Math.cos(brng));
//
//         var lon2 = lon1 + Math.atan2(Math.sin(brng) * Math.sin(dist) *
//                                      Math.cos(lat1), 
//                                      Math.cos(dist) - Math.sin(lat1) *
//                                      Math.sin(lat2));
//
//         if (isNaN(lat2) || isNaN(lon2)) return null;
//
//         return new google.maps.LatLng(lat2.toDeg(), lon2.toDeg());
//      }
//
//      var pointA = geometry // Circle center
//      var radius = 5;                                      // 10km
//
////      var mapOpt = { 
////         mapTypeId: google.maps.MapTypeId.TERRAIN,
////         center: pointA,
////         zoom: 10
////      };
////
////      var map = new google.maps.Map(document.getElementById("map"), mapOpt);
//
//      // Draw the circle
//      new google.maps.Circle({
//         center: geometry,
//         radius: radius * 1000,       // Convert to meters
//         fillColor: '#FF0000',
//         fillOpacity: 0.2,
//         map: map
//      });
//
//      // Show marker at circle center
////      new google.maps.Marker({
////         position: pointA,
////         map: map
////      });
////
////      // Show marker at destination point
////      new google.maps.Marker({
////         draggable : true,
////         position: pointA.destinationPoint(90, radius),
////         map: map
////      });
//    }
// 
    </script>
    
     

    



<script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD_gey95_o_lWMtNN8GMKOjES-K5ptc048&libraries=places&callback=initAutocomplete">
    </script>

<% include ./partials/footer.ejs %>
